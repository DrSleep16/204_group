#ДЗ на понедельник:
# 1. Пользователь вводит год. Определить, является ли он високосным
# Если год делится на 4 без остатка - он високсоный
# Но! Если год делится на 4 и на 100 - он не високосный
# Но! Если год делится на 4 на 100 и на 400 - он високосный
# year = int(input('Введите год: '))
# if year%400 == 0:
#     print('Год високосный')
# elif year%100 == 0:
#     print('Не високосный')
# elif year%4 == 0:
#     print('Год високосный')
# else:
#     print('Не високосный')
# if year%4==0 and year%100 != 0 or year%400==0:print('Год високосный')
# else: print('Не високосный')
# 21/4 ->5.25, 21//4 ->5
# if year/400 == year//400: print('Год високосный')


# 2. Определить, существует ли треугольник с заданными сторонами
# Если каждая сторона меньше суммы других, то треугольник существует

# AB = 5
# BC = 6
# AC = 5

# if AB < BC+AC and BC < AB+AC and AC < AB+BC: print('Существует')
# else: print('Не существует')
# print(AB < BC+AC and BC < AB+AC and AC < AB+BC)

# if 2==3:
#     print('True')
#     if 3==3:
#         print('3==3')
#         #Каждый отступ (табуляция или пробел) - это и есть ветвление

# not - не если условие ложно
# or - или хотя бы одно условие верно
# and - и оба условия верны

#СТРОКИ (str)
#Строки - упорядоченные неизменяемые последовательности символов
#Любой тип данных можно превратить в строку (команда str)
# СТроки нужны для хранения любой текстовой информации

#Способы создания строк:
# 1. С помощью кавычек
# firts_str = 'Строка_1' #создали строку с помощью одинарных кавычек
# second_str = "Строка_2" #с помощью двойных кавычек
# my_str = 'Термин "Python" переводится как змея' #в строке использовали двойные кавычки как чцитату
# 2. С помощью тройных и более кавычек
# my_string = '''Это очень длинная строка, "ей нужно" много места. I'm'''
#3. Команда str()
# my_nm = 12345
# my_str = str(my_nm)
# print(type(my_str))

#Базовые операции со строками:
# 1. Сложение строк (+) (конкатенация строк)
# a = 'Первый текст'
# b = 'Второй текст'
# print(a+ ' '+ b) # + объединит две строки в одну
#2. Умножение строк (*)
# str_1 = 'строка\n'
# print(str_1*5)
# print(str_1*str_1) #нельзя умножать строку на строку
# оператор \n можно писать внутри строк, он делает перенос строки
# 3. Длина строки (len)
# str_2 = 'Строка str'
# print(len(str_2), 'символов') #функция len вернет количество символов, в том числе пробелы

#Task_1. Написать программу, которая запросит наше имя
# Затем выведет строку "Привет, ...". - первая строка
# Затем выведет имя пользователя три раза - вторая строка

# name = input('Введите имя: ')
# print('Привет,', name)
# # print(f'''Привет, {name}''')
# print(name*3)

#Срезы строк (подстроки)
# Срезы - извлечение из строки одного или нескольких последовательных символов
# Индекс - номер символа в строке. Нумерация индексов начинается с 0

# Строка: Hello
# H[0], e[1], l[2], l[3], o[4] #при положительном подсчете нумерация начинается с 0
# H[-5], e[-4], l[-3], l[-2], o[-1] # при отрицательном подсчете нумерация начинается с -1

# 'hello'[3] #[3] - срез, 3 - индекс

# s = 'Hello'
# 1. первый тип среза - взять один символ из строки
# print(s[0], s[4], s[-2])
#2. ВТорой тип среза - срез с двумя параметрами (диапазон символов строки)
# print(s[0:4], s[1:3], s[1:]) #срез вида [a:b] выведет символы от а до b не включительно
#Если после двоеточия не ставить аргумент b, то срез будет до конца строки
#Если перед двоеточием не ставить аргумент а, то срез будет от начала строки
# print(s[:]) #если не ставить ни a, ни b, то будет выведена вся строка
#3. Третий тип среза - с тремя параметрами (s[a:b:c])
# a - начало среза
# b - конец среза (берется не включительно)
# c - шаг среза
# print(s[0:5:2], s[::1], s[0:5:1], s[::3])

#Строки в пайтон изменить нельзя. Но можно в переменную занести новую строку

#Task_2. Вычислить сумму цифр случайного трехзначного числа

import random
# n = random.randint(100, 999)
# print(n)
# n = str(n)
# a=int(n[0])
# b=int(n[1])
# c=int(n[2])
# print(a+b+c)
# n = random.randint(100,999)
# print(int(str(n)[0])+int(str(n)[1])+
#       int(str(n)[2]))

#Методы для строк:
# s = '-0overone школа'
# print(s.capitalize()) #делает первую букву заглавной
# print(s.title()) #все слова начнутся с заглавной
# print(s.upper()) #все буквы заглавные
# print(s.lower()) #все буквы строчные
# print(s.swapcase()) #заглавные и строчные станут строчными и заглавными
# print(s.isupper()) #вернет True если все символы заглавные
# print(s.islower()) #вернет True если все строчные
# print(s.istitle()) #вернет True если каждое слово начинается с заглавной

# s='1234'
# print(s.isdigit()) #вернет True если все символы строки это числа
# s1 = 'stroka'
# print(s1.isalpha()) #True если все символы это буквы

#Task_3. Пользователь вводит строку. Вывести на печать:
# s = str(input('Введите строку: '))
#1. Каждый третий символ этой строки
# print(s[::3])
#2. Первый и последний символы строки
# print(s[0],s[-1])
#3. Всю строку в верхнем регистре
# print(s.upper())
#4. Вся строка в обратном порядке
# print(s[::-1]) #отрицательный шаг выводит символы спарва налево
#5. True, если все символы это числа
# print(s.isdigit())

#Объединение(.join()) и разбитие строк (.split())
# s = 'Я изучаю язык Python'
# s = s.split() #split с пустым аргументом разбивает строку s по пробелам
# print(s) #при разрыве строки на части получаем список из все слов строки
# print(type(s)) #получили тип данных list (список)

# s = 'Я,изучаю,язык,,Python'
# s = s.split(',') #при разрыве получили список из всех строк, которые стояли между запятыми
# print(s)

#<строка>.split('<разделитель>')
# print('Я,изучаю,язык,,Python'.split(',')) #более компактный вариант


# a = ['первое', "второе", "третье"]
# a = ':'.join(a)
# print(a)
# '<разделитель>'.join(<список>)

#join объединяет список в строку
#split разъединяет строу и создает список

# a = ' '.join(['первое', "второе", "третье"])
# print(a)

# s = ' '.join('Я,изучаю,язык,Python'.split(',')) #первый вариант
# print(s)
#второй вариант:
# s = 'Я,изучаю,язык,Python'
# s = s.split(',')
# s = ' '.join(s)
# print(s)

# s = 'Я,изучаю,язык,Python'.replace(',', ' ') #replace заменяет в строке первый аргумент на второй
# print(s)

#Task_4. Пользователь вводит строку. Удалить из нее все пробелы. И узнать, является ли
# строка полиндромом
# s = ''.join(input('Введите строку: ').split())
# s = input('Введите строку: ').replace(' ', '')
# s1 = s[::-1]
# print(s1==s)
# print(True if s==s1 else False) #постусловие
#если в условиях содержится одна простая команда, то ее можно указать до условия в одну строку


#Методы find, index
# print('abcef'.find('d')) #find укажет, на каком месте был искомый аргумент в строке
#если find не нашел этот символ, то вернут значение -1
# print('abcde'.index('f')) #аналогично find, но вернет ошибку, если не найдет символ



#ЦИКЛ for
# В пайтоне существует два вида циклов: for, while
# Цикл for - это цикл с параметром. В этом цикле указывается переменная и
# множество значений, по которым эта переменная будет пробегать

# for i in range(5):
#     print('Hello')
#for - это команда объявления цикла for
# переменная i - итератор, параметр цикла или переменная цикла
# range(n) - диапазон чисел от 0 до n(не включая n)
# for i in range(5):
#     print(i)

# print((range(5))) #range это тип данных
# print(*range(5)) #чтобы распечатать диапазон range переде ним нужно поставить *

# for i in range(5): print(i) #если цикл содержит одну команду, то можно перенос не делать

# print([i for i in range(5)]) #цикл с постусловием

# print(*range(4,8)) #range с аргументами a,b это диапазон от а до b
# print(*range(4,80,5)) #range с аргументами a,b,c это диапазон от а до b с шагом с
# print(*range(10,-100,-5)) #отрицательный шаг выводит диапазон в сторону уменьшения

# for i in 'Какая-то строка': #в цикле переменная обходит каждый символ строки
#     print(i)

#Task_1. В строке 'Какая-то строка' с помощью цикла удалить все буквы "о"
# c = ''
# for i in 'Какая-то строка':
#     if i != 'о':
#         c += i
# print(c)
# for i in 'Какая-то строка':
#     if i != 'о':
#         print(i, end='')

#Task_2. Спросить у пользователя начало, конец и шаг последовательности.
# Вывести на экран данную последовательность чисел
# a = int(input('Начало: '))
# b = int(input('Конец:'))
# c = int(input('Шаг:'))
#
# print(*range(a,b,c))

#Task_3. Вывести на печать все числа от 43 до 943, которые делятся на 5
# a = 43
# b = 943
#
# for i in range(a,b+1):
#     if i%5 == 0:
#         print(i,end='\t') #'\t' - это знак табуляции

#Массивы в Пайтоне
#Массивы в пайтоне представлены типом данных list(списки)

#Пустой список
# arr = []
# print(arr)

#Массив строк:
# arr = ['s1','s2','s3']
# print(arr)

#Массив из строк и чисел
# arr = ['one',1,'1','two']

# a1 = [True, True, True]
# print(a1)

# if []: #список в виде условия вернет True всегда, кроме когда он пустой
#     print('rr')

# arr = ['fdd', 'cggg',44, 45.6, True]
# print(len(arr)) #len вернет количество элементов списка
# print(len([]))

# massiv = [1,2,5,10, 'one'] #тип list
# for i in massiv:
#     print(i)

#Операторы break, continue
massiv = [1,2,5,10, 'one']
# for i in massiv:
#     if i == 10:
#         break #break выходит из цикла, даже если он не завершен
#     print(i)

# for i in massiv:
#     if i==10:
#         continue #continue начинает следующий шаг цикла, минуя оставшееся тело цикла
#     print(i)

# a = [1,2,7]
# print(a)
# #добавить в список элемент 9
# a.append(9) #так как списки это изменяемый тип данных,
# # то переменную а можно изменять без
# # переприсваивания (в отличие от строк)
# print(a)

a = [1,2,3,'ttt',True, 4.5,None, 'T', 'ttt']
#None - один из типов данных, это пустое значение
#append - добавляет элементы в конец списка
# print(a.count(3)) #count выведет количество указанных аргументов в списке
# print(a.index('ttt')) #index вернет индекс указанного аргумента в списке
# print(a.pop()) #pop при печати выведет последний элемент списка
# a.pop() #если метод pop не печатать, то он удалит последний элемент
# print(a)
# print(a.pop(1)) #если pop указать аргумент, то будет распечатан элемент на этом индексе
#метод pop работает на печать или самостоятельно
# a.remove('ttt') #remove удаляет первое вхождение указанного значение
# print(a)
# a.reverse() #reverse обращает список в обратную сторону
#reverse это самостоятельный метод, он не выводится на печать
# print(a)

#Task_3. Ресторан. Есть меню как список блюд.
# Есть переменная, в которой хранится наше
# любимое блюдо. Официант будет перечислять блюда из меню.
# Как только он назовет наше любимо,
# мы должны сказать "Я это ем" и остановить официанта.
# menu = ['Мясо', "Рыба", "Птица","Салат","Сыр"]
# my_fav = 'Салат'
# for bludo in menu:
#     if bludo == my_fav:
#         print(f'{bludo}: Я это ем!')
#         break
#     else:
#         print(f"{bludo}:Я это не ем!")

#Task_4. Найти сумму и произведение чисел в массиве.
# Все числа в массиве случайные (10 чисел от 0 до 100)
# from random import randint #из библиотеки random импортировали только метод randint
# mas = []
# for i in range(10):
#     mas.append(randint(0,100))
# print(mas)
#Для подсчета суммы и произведения по спискам лучше заводить заранее счетчики-переменные
# s = 0 #это счетчик суммы
# p = 1 #это счетчик произведения
# for i in mas:
#     s += i
#     p *= i
# print(f'Сумма: {s}, произведение: {p}')
# print(sum(mas))
# import math
# print(math.prod(mas))

#Task_5. Таблица умножения от 1 до 9 (матрица 9 на 9)
# for i in range(1,10):
#     for j in range(1,10):
#         print(i*j,end='|\t')
#     print()

# ДЗ на понедельник:
# 1. Перемножить все нечетные числа от a до b. a,b задаются пользователем
# 2. Вывести все четные числа от a до b
# 3. Дан список sp = [2343, 5668,23,46,10,23,2343]. Если число встретилось больше 1 раза
# то добавить его в новый список
# 4. Творческое: для таблицы умножения сделать сетку,
# поменять цвет текста и добавить оформления на свой вкус